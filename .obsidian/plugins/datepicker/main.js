/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  datepickerCMPlugin: () => datepickerCMPlugin,
  default: () => DatepickerPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_view = require("@codemirror/view");
var DateButtonWidget = class extends import_view.WidgetType {
  toDOM() {
    const button = document.createElement("span");
    button.className = "datepicker-button";
    (0, import_obsidian.setIcon)(button, "calendar");
    return button;
  }
  ignoreEvent() {
    return false;
  }
  eq() {
    return true;
  }
};
var TimeButtonWidget = class extends import_view.WidgetType {
  toDOM() {
    const button = document.createElement("span");
    button.className = "datepicker-button";
    (0, import_obsidian.setIcon)(button, "clock");
    return button;
  }
  ignoreEvent() {
    return false;
  }
  eq() {
    return true;
  }
};
function pickerButtons(dateMatches) {
  const buttons = [];
  if (!DatepickerPlugin.settings.showDateButtons && !DatepickerPlugin.settings.showTimeButtons)
    return import_view.Decoration.set([]);
  for (const dateMatch of dateMatches) {
    if (DatepickerPlugin.settings.showDateButtons && (dateMatch.format.type === "DATE" || dateMatch.format.type === "DATETIME")) {
      let buttonDeco = import_view.Decoration.widget({
        widget: new DateButtonWidget(),
        side: -1
      });
      buttons.push(buttonDeco.range(dateMatch.from));
    } else if (DatepickerPlugin.settings.showTimeButtons && dateMatch.format.type === "TIME") {
      let buttonDeco = import_view.Decoration.widget({
        widget: new TimeButtonWidget(),
        side: -1
      });
      buttons.push(buttonDeco.range(dateMatch.from));
    }
  }
  return import_view.Decoration.set(buttons, true);
}
var DatepickerCMPlugin = class {
  constructor(view) {
    this.datepickerScrollHandler = () => {
      this.datepickerPositionHandler();
    };
    this.formats = [
      {
        regex: /\d{4}[-\/\\.]{1}\d{1,2}[-\/\\.]{1}\d{1,2}[ T]\d{1,2}:\d{1,2}( )?([apm]{2})/ig,
        formatToUser: "YYYY-MM-DD hh:mm A",
        formatToPicker: "YYYY-MM-DDTHH:mm",
        type: "DATETIME"
      },
      {
        regex: /\d{4}[-\/\\.]{1}\d{1,2}[-\/\\.]{1}\d{1,2}[ T]\d{1,2}:\d{1,2}/g,
        formatToUser: "YYYY-MM-DD HH:mm",
        formatToPicker: "YYYY-MM-DDTHH:mm",
        type: "DATETIME"
      },
      {
        regex: /\d{1,2}[-\/\\.]{1}\d{1,2}[-\/\\.]{1}\d{4} \d{1,2}:\d{1,2}( )?([apm]{2})/ig,
        formatToUser: "DD-MM-YYYY hh:mm A",
        formatToPicker: "YYYY-MM-DDTHH:mm",
        type: "DATETIME"
      },
      {
        regex: /\d{1,2}[-\/\\.]{1}\d{4}[ T]\d{1,2}:\d{1,2}/g,
        formatToUser: "DD-MM-YYYY HH:mm",
        formatToPicker: "YYYY-MM-DDTHH:mm",
        type: "DATETIME"
      },
      {
        regex: /\d{4}[-\/\\.]{1}\d{1,2}[-\/\\.]{1}\d{1,2}/g,
        formatToUser: "YYYY-MM-DD",
        formatToPicker: "YYYY-MM-DD",
        type: "DATE"
      },
      {
        regex: /\d{1,2}[-\/\\.]{1}\d{1,2}[-\/\\.]{1}\d{4}/g,
        formatToUser: "DD-MM-YYYY",
        formatToPicker: "YYYY-MM-DD",
        type: "DATE"
      },
      {
        regex: /\d{1,2}:\d{1,2}( )?([apm]{2})/ig,
        formatToUser: "hh:mm A",
        formatToPicker: "HH:mm",
        type: "TIME"
      },
      {
        regex: /\d{1,2}:\d{1,2}/g,
        formatToUser: "HH:mm",
        formatToPicker: "HH:mm",
        type: "TIME"
      }
    ];
    this.scrollEventAbortController = new AbortController();
    this.datepicker = void 0;
    this.dates = [];
    this.performedSelectText = false;
    this.updateTimer = false;
    this.view = view;
    view.scrollDOM.addEventListener("scroll", this.datepickerScrollHandler.bind(this, view), { signal: this.scrollEventAbortController.signal });
    this.dates = this.getVisibleDates(view);
    this.decorations = pickerButtons(this.dates);
  }
  datepickerPositionHandler() {
    if (this.datepicker === void 0)
      return;
    this.view.requestMeasure({
      read: (state) => {
        var _a;
        let pos = state.coordsAtPos((_a = this.datepicker) == null ? void 0 : _a.cursorPosition);
        return pos;
      },
      write: (pos) => {
        if (pos) {
          this.datepicker.updatePosition({
            top: pos.top,
            left: pos.left,
            bottom: pos.bottom
          });
        }
      }
    });
  }
  getVisibleDates(view) {
    var _a;
    let visibleText = [];
    visibleText = view.visibleRanges.map((r) => {
      return { from: r.from, to: r.to, text: view.state.doc.sliceString(r.from, r.to) };
    });
    let matchingDate;
    const dateMatches = [];
    for (const vt of visibleText) {
      if (vt.from >= view.viewport.from && vt.to <= view.viewport.to)
        for (const format of this.formats) {
          while ((matchingDate = format.regex.exec((_a = vt.text) != null ? _a : "")) !== null) {
            const matchingDateStart = (matchingDate == null ? void 0 : matchingDate.index) + vt.from;
            const matchingDateEnd = (matchingDate == null ? void 0 : matchingDate.index) + matchingDate[0].length + vt.from;
            if (dateMatches.some((m) => matchingDateStart >= m.from && (matchingDateEnd <= m.to || matchingDateStart <= m.to)))
              continue;
            dateMatches.push({ from: matchingDate.index + vt.from, to: matchingDate.index + matchingDate[0].length + vt.from, value: matchingDate[0], format });
          }
        }
    }
    return dateMatches;
  }
  getAllDates(view) {
    let matchingDate;
    const dateMatches = [];
    const noteText = view.state.doc.toString();
    this.formats.forEach((format) => {
      while ((matchingDate = format.regex.exec(noteText)) !== null) {
        const matchingDateStart = matchingDate == null ? void 0 : matchingDate.index;
        const matchingDateEnd = (matchingDate == null ? void 0 : matchingDate.index) + matchingDate[0].length;
        if (dateMatches.some((m) => matchingDateStart >= m.from && (matchingDateEnd <= m.to || matchingDateStart <= m.to)))
          continue;
        dateMatches.push({ from: matchingDate.index, to: matchingDate.index + matchingDate[0].length, value: matchingDate[0], format });
      }
    });
    return dateMatches;
  }
  getNextMatch(view, cursorPosition) {
    const matches = this.getAllDates(view).sort((a, b) => a.from - b.from);
    return matches.find((m) => m.from > cursorPosition);
  }
  getPreviousMatch(view, cursorPosition) {
    const matches = this.getAllDates(view).sort((a, b) => b.from - a.from);
    return matches.find((m) => m.to < cursorPosition);
  }
  // flag to prevent repeatedly selecting text
  openDatepicker(view, match) {
    view.requestMeasure({
      read: (view2) => {
        let pos = view2.coordsAtPos(match.from);
        return pos;
      },
      write: (pos) => {
        if (!pos)
          return;
        this.datepicker = new Datepicker();
        this.datepicker.open(
          pos,
          match,
          (result) => {
            const resultFromPicker = (0, import_obsidian.moment)(result);
            if (!resultFromPicker.isValid()) {
              return;
            }
            const dateFromPicker = resultFromPicker.format(match.format.formatToUser);
            if (dateFromPicker === match.value)
              return;
            let transaction = view.state.update({
              changes: {
                from: match.from,
                to: match.to,
                insert: dateFromPicker
              }
            });
            view.dispatch(transaction);
          }
        );
      }
    });
  }
  update(update) {
    var _a;
    this.view = update.view;
    if (update.docChanged || update.geometryChanged || update.viewportChanged || update.heightChanged) {
      this.datepickerPositionHandler();
      this.dates = this.getVisibleDates(update.view);
      this.decorations = pickerButtons(this.dates);
    }
    if (update.docChanged === false && update.state.selection.main.from === update.startState.selection.main.from && update.state.selection.main.to === update.startState.selection.main.to)
      return;
    if (this.updateTimer)
      return;
    this.updateTimer = true;
    setTimeout(() => this.updateTimer = false, 300);
    const { view } = update;
    const cursorPosition = view.state.selection.main.head;
    const match = this.dates.find((date) => date.from <= cursorPosition && date.to >= cursorPosition);
    if (match) {
      const { from } = update.state.selection.main;
      const { to } = update.state.selection.main;
      if (from !== to) {
        if (from !== match.from || to !== match.to) {
          Datepicker.closeAll();
          return;
        }
      }
      if (this.datepicker !== void 0) {
        if (this.previousDateMatch !== void 0) {
          if (this.previousDateMatch.from === match.from) {
            if (((_a = this.datepicker) == null ? void 0 : _a.closedByButton) || Datepicker.escPressed)
              return;
          } else {
            this.performedSelectText = false;
            if (!Datepicker.openedByButton) {
              Datepicker.calendarImmediatelyShownOnce = false;
            } else
              Datepicker.openedByButton = false;
          }
        }
      } else
        this.performedSelectText = false;
      if (DatepickerPlugin.settings.selectDateText && !this.performedSelectText && (!update.docChanged || Datepicker.performedInsertCommand)) {
        this.performedSelectText = true;
        setTimeout(() => view.dispatch({ selection: { anchor: match.from, head: match.to } }), 300);
      }
      this.previousDateMatch = match;
      if (DatepickerPlugin.settings.showAutomatically)
        if (Datepicker.performedInsertCommand)
          setTimeout(() => Datepicker.performedInsertCommand = false, 350);
        else
          setTimeout(
            () => {
              var _a2;
              (_a2 = this.datepicker) == null ? void 0 : _a2.closeAll();
              this.openDatepicker(view, match);
            },
            100
          );
    } else {
      Datepicker.calendarImmediatelyShownOnce = false;
      this.performedSelectText = false;
      if (this.datepicker !== void 0) {
        this.datepicker.closeAll();
        this.datepicker = void 0;
      }
    }
  }
  destroy() {
    Datepicker.closeAll();
    this.scrollEventAbortController.abort();
  }
};
var datepickerCMPlugin = import_view.ViewPlugin.fromClass(DatepickerCMPlugin, {
  decorations: (v) => {
    return v.decorations;
  },
  eventHandlers: {
    mousedown: (e, view) => {
      datepickerButtonEventHandler(e, view);
    },
    touchend: (e, view) => {
      datepickerButtonEventHandler(e, view);
    }
  }
});
function datepickerButtonEventHandler(e, view) {
  var _a, _b;
  let target = e.target;
  const dpCMPlugin = view.plugin(datepickerCMPlugin);
  if (target.matches(".datepicker-button, .datepicker-button *")) {
    e.preventDefault();
    const cursorPositionAtButton = view.posAtDOM(target);
    if (((_a = dpCMPlugin.datepicker) == null ? void 0 : _a.cursorPosition) !== void 0 && (dpCMPlugin == null ? void 0 : dpCMPlugin.datepicker.cursorPosition) === cursorPositionAtButton && Datepicker.isOpened) {
      dpCMPlugin.datepicker.closeAll();
      dpCMPlugin.datepicker.closedByButton = true;
    } else {
      (_b = dpCMPlugin.datepicker) == null ? void 0 : _b.closeAll();
      setTimeout(() => {
        Datepicker.openedByButton = true;
        Datepicker.calendarImmediatelyShownOnce = false;
        const dateMatch = dpCMPlugin.dates.find(
          (date) => date.from <= cursorPositionAtButton && date.to >= cursorPositionAtButton
        );
        if (DatepickerPlugin.settings.selectDateText)
          setTimeout(() => view.dispatch({ selection: { anchor: dateMatch.from, head: dateMatch.to } }), 50);
        dpCMPlugin.openDatepicker(
          view,
          dateMatch
        );
      }, 250);
    }
  }
}
var DEFAULT_SETTINGS = {
  showDateButtons: true,
  showTimeButtons: true,
  showAutomatically: false,
  autoApplyEdits: true,
  immediatelyShowCalendar: false,
  autofocus: false,
  focusOnArrowDown: false,
  insertIn24HourFormat: false,
  selectDateText: false
};
var _DatepickerPlugin = class extends import_obsidian.Plugin {
  async onload() {
    await this.loadSettings();
    this.registerEditorExtension(datepickerCMPlugin);
    this.addCommand({
      id: "edit-date",
      name: "Edit date",
      editorCallback: (editor) => {
        const editorView = editor.cm;
        const cursorPosition = editorView.state.selection.main.to;
        if (cursorPosition === void 0) {
          new import_obsidian.Notice("Please select a date");
          return;
        }
        const plugin = editorView.plugin(datepickerCMPlugin);
        const match = plugin.dates.find((date) => date.from <= cursorPosition && date.to >= cursorPosition);
        if (match) {
          plugin.openDatepicker(editorView, match);
        } else
          new import_obsidian.Notice("Please select a date");
      }
    });
    this.addCommand({
      id: "insert-date",
      name: "Insert new date",
      editorCallback: (editor) => {
        const editorView = editor.cm;
        const cursorPosition = editorView.state.selection.main.to;
        if (cursorPosition === void 0)
          return;
        const pos = editorView.coordsAtPos(cursorPosition);
        if (!pos)
          return;
        const datepicker = new Datepicker();
        const dateFormat = { regex: new RegExp(""), type: "DATE", formatToUser: "", formatToPicker: "" };
        const dateType = { from: cursorPosition, to: cursorPosition, value: "", format: dateFormat };
        datepicker.open(
          { top: pos.top, left: pos.left, right: pos.right, bottom: pos.bottom },
          dateType,
          (result) => {
            if ((0, import_obsidian.moment)(result).isValid() === true) {
              setTimeout(() => {
                Datepicker.performedInsertCommand = true;
                editorView.dispatch({
                  changes: {
                    from: cursorPosition,
                    to: cursorPosition,
                    insert: (0, import_obsidian.moment)(result).format("YYYY-MM-DD")
                  }
                });
              }, 250);
              datepicker.closeAll();
            } else
              new import_obsidian.Notice("Please enter a valid date");
          }
        );
        datepicker.focus();
      }
    });
    this.addCommand({
      id: "insert-time",
      name: "Insert new time",
      editorCallback: (editor) => {
        const editorView = editor.cm;
        const cursorPosition = editorView.state.selection.main.to;
        if (cursorPosition === void 0)
          return;
        const pos = editorView.coordsAtPos(cursorPosition);
        if (!pos)
          return;
        const datepicker = new Datepicker();
        const dateFormat = { regex: new RegExp(""), type: "TIME", formatToUser: "", formatToPicker: "" };
        const dateType = { from: cursorPosition, to: cursorPosition, value: "", format: dateFormat };
        datepicker.open(
          { top: pos.top, left: pos.left, right: pos.right, bottom: pos.bottom },
          dateType,
          (result) => {
            if ((0, import_obsidian.moment)(result, "HH:mm").isValid() === true) {
              let timeFormat;
              if (_DatepickerPlugin.settings.insertIn24HourFormat)
                timeFormat = "HH:mm";
              else
                timeFormat = "hh:mm A";
              setTimeout(() => {
                Datepicker.performedInsertCommand = true;
                editorView.dispatch({
                  changes: {
                    from: cursorPosition,
                    to: cursorPosition,
                    insert: (0, import_obsidian.moment)(result, "HH:mm").format(timeFormat)
                  }
                });
              }, 250);
              datepicker.closeAll();
            } else
              new import_obsidian.Notice("Please enter a valid time");
          }
        );
        datepicker.focus();
      }
    });
    this.addCommand({
      id: "insert-datetime",
      name: "Insert new date and time",
      editorCallback: (editor) => {
        const editorView = editor.cm;
        const cursorPosition = editorView.state.selection.main.to;
        if (cursorPosition === void 0)
          return;
        const pos = editorView.coordsAtPos(cursorPosition);
        if (!pos)
          return;
        const datepicker = new Datepicker();
        const dateFormat = { regex: new RegExp(""), type: "DATETIME", formatToUser: "", formatToPicker: "" };
        const dateType = { from: cursorPosition, to: cursorPosition, value: "", format: dateFormat };
        datepicker.open(
          { top: pos.top, left: pos.left, right: pos.right, bottom: pos.bottom },
          dateType,
          (result) => {
            if ((0, import_obsidian.moment)(result).isValid() === true) {
              let timeFormat;
              if (_DatepickerPlugin.settings.insertIn24HourFormat)
                timeFormat = "HH:mm";
              else
                timeFormat = "hh:mm A";
              setTimeout(() => {
                Datepicker.performedInsertCommand = true;
                editorView.dispatch({
                  changes: {
                    from: cursorPosition,
                    to: cursorPosition,
                    insert: (0, import_obsidian.moment)(result).format("YYYY-MM-DD " + timeFormat)
                  }
                });
              }, 250);
              datepicker.closeAll();
            } else
              new import_obsidian.Notice("Please enter a valid date and time");
          }
        );
        datepicker.focus();
      }
    });
    this.addCommand({
      id: "insert-current-time",
      name: "Insert current time",
      editorCallback: (editor) => {
        const editorView = editor.cm;
        const cursorPosition = editorView.state.selection.main.to;
        if (cursorPosition === void 0)
          return;
        let timeFormat;
        if (_DatepickerPlugin.settings.insertIn24HourFormat)
          timeFormat = "HH:mm";
        else
          timeFormat = "hh:mm A";
        Datepicker.performedInsertCommand = true;
        editorView.dispatch({
          changes: {
            from: cursorPosition,
            to: cursorPosition,
            insert: (0, import_obsidian.moment)().format(timeFormat)
          }
        });
      }
    });
    this.addCommand({
      id: "insert-current-datetime",
      name: "Insert current date and time",
      editorCallback: (editor) => {
        const editorView = editor.cm;
        const cursorPosition = editorView.state.selection.main.to;
        if (cursorPosition === void 0)
          return;
        let timeFormat;
        if (_DatepickerPlugin.settings.insertIn24HourFormat)
          timeFormat = "HH:mm";
        else
          timeFormat = "hh:mm A";
        Datepicker.performedInsertCommand = true;
        editorView.dispatch({
          changes: {
            from: cursorPosition,
            to: cursorPosition,
            insert: (0, import_obsidian.moment)().format("YYYY-MM-DD " + timeFormat)
          }
        });
      }
    });
    this.addCommand({
      id: "insert-current-date",
      name: "Insert current date",
      editorCallback: (editor) => {
        const editorView = editor.cm;
        const cursorPosition = editorView.state.selection.main.to;
        if (cursorPosition === void 0)
          return;
        Datepicker.performedInsertCommand = true;
        editorView.dispatch({
          changes: {
            from: cursorPosition,
            to: cursorPosition,
            insert: (0, import_obsidian.moment)().format("YYYY-MM-DD")
          }
        });
      }
    });
    this.addCommand({
      id: "select-next-datetime",
      name: "Select next date/time",
      editorCallback: (editor) => {
        const editorView = editor.cm;
        const cursorPosition = editorView.state.selection.main.to;
        if (cursorPosition === void 0)
          return;
        const dpCMPlugin = editorView.plugin(datepickerCMPlugin);
        if (!dpCMPlugin)
          return;
        const match = dpCMPlugin.getNextMatch(editorView, cursorPosition);
        if (match) {
          editorView.dispatch({
            selection: {
              anchor: match.from,
              head: match.from
            },
            scrollIntoView: true
          });
        } else
          new import_obsidian.Notice("No next date/time found");
      }
    });
    this.addCommand({
      id: "select-previous-datetime",
      name: "Select previous date/time",
      editorCallback: (editor) => {
        const editorView = editor.cm;
        const cursorPosition = editorView.state.selection.main.to;
        if (cursorPosition === void 0)
          return;
        const dpCMPlugin = editorView.plugin(datepickerCMPlugin);
        if (!dpCMPlugin)
          return;
        const match = dpCMPlugin.getPreviousMatch(editorView, cursorPosition);
        if (match) {
          editorView.dispatch({
            selection: {
              anchor: match.from,
              head: match.from
            },
            scrollIntoView: true
          });
        } else
          new import_obsidian.Notice("No previous date/time found");
      }
    });
    this.addSettingTab(new DatepickerSettingTab(this.app, this));
    this.registerEvent(
      this.app.workspace.on(
        "active-leaf-change",
        () => {
          Datepicker.escPressed = false;
          Datepicker.closeAll();
        }
      )
    );
  }
  onunload() {
  }
  async loadSettings() {
    _DatepickerPlugin.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(_DatepickerPlugin.settings);
  }
};
var DatepickerPlugin = _DatepickerPlugin;
DatepickerPlugin.settings = DEFAULT_SETTINGS;
var _Datepicker = class {
  constructor() {
    this.closedByButton = false;
    // Used for preventing blur event from inserting date twice
    this.enterPressed = false;
    this.closeAll();
  }
  updatePosition(pos) {
    const left = pos.left - this.viewContainer.getBoundingClientRect().left;
    if (left + this.pickerContainer.offsetWidth > this.viewContainer.offsetWidth)
      this.pickerContainer.style.left = left - (left + this.pickerContainer.offsetWidth - this.viewContainer.offsetWidth) + "px";
    else
      this.pickerContainer.style.left = left + "px";
    const leafTop = this.viewContainer.closest(".workspace-leaf-content").getBoundingClientRect().top;
    if (pos.bottom - leafTop > this.viewContainer.offsetHeight)
      this.pickerContainer.style.top = pos.top - leafTop - this.pickerContainer.offsetHeight + "px";
    else
      this.pickerContainer.style.top = pos.bottom - leafTop + "px";
  }
  focus() {
    var _a;
    (_a = activeDocument.getElementById("datepicker-input")) == null ? void 0 : _a.focus();
  }
  static closeAll() {
    _Datepicker.isOpened = false;
    let datepickers = activeDocument.getElementsByClassName("datepicker-container");
    for (var i = 0; i < datepickers.length; i++) {
      datepickers[i].remove();
    }
  }
  closeAll() {
    if (import_obsidian.Platform.isMobile) {
      setTimeout(() => {
        if (!_Datepicker.escPressed && !this.enterPressed)
          this.submit();
      }, 50);
    }
    _Datepicker.closeAll();
  }
  submit() {
    let submitValue = this.pickerInput.value;
    if (submitValue.length === 0)
      return;
    if (submitValue === this.datetime.value)
      return;
    if (this.onSubmit !== void 0) {
      if (this.datetime.format.type === "TIME")
        submitValue = "1970-01-01 " + this.pickerInput.value;
    }
    this.onSubmit(submitValue);
  }
  open(pos, datetime, onSubmit) {
    var _a, _b;
    this.onSubmit = onSubmit;
    this.datetime = datetime;
    this.cursorPosition = datetime.from;
    _Datepicker.isOpened = true;
    this.closedByButton = false;
    _Datepicker.escPressed = false;
    this.viewContainer = (_a = activeDocument.querySelector(".workspace-leaf.mod-active")) == null ? void 0 : _a.querySelector(".cm-editor");
    if (!this.viewContainer) {
      console.error("Could not find view container");
      return;
    }
    this.pickerContainer = this.viewContainer.createEl("div");
    this.pickerContainer.className = "datepicker-container";
    this.pickerContainer.id = "datepicker-container";
    this.pickerInput = this.pickerContainer.createEl("input");
    if (datetime.format.type === "TIME")
      this.pickerInput.type = "time";
    else if (datetime.format.type === "DATE")
      this.pickerInput.type = "date";
    else
      this.pickerInput.type = "datetime-local";
    this.pickerInput.id = "datepicker-input";
    this.pickerInput.className = "datepicker-input";
    this.pickerInput.value = (0, import_obsidian.moment)(datetime.value, [
      "YYYY-MM-DD hh:mm A",
      "YYYY-MM-DDThh:mm",
      "YYYY-MM-DD hh:mma",
      "YYYY.MM.DD HH:mm",
      "YYYY-MM-DD",
      "DD-MM-YYYY HH:mm",
      "DD-MM-YYYY hh:mm A",
      "DD-MM-YYYY hh:mma",
      "DD-MM-YYYY",
      "hh:mm A",
      "HH:mm"
    ], false).format(datetime.format.formatToPicker);
    const acceptButton = this.pickerContainer.createEl("button");
    acceptButton.className = "datepicker-widget-button";
    (0, import_obsidian.setIcon)(acceptButton, "check");
    const buttonEventAbortController = new AbortController();
    const acceptButtonEventHandler = (event) => {
      event.preventDefault();
      if (this.pickerInput.value === "") {
        new import_obsidian.Notice("Please enter a valid date");
      } else {
        this.enterPressed = true;
        this.submit();
        buttonEventAbortController.abort();
        _Datepicker.closeAll();
      }
    };
    acceptButton.addEventListener("click", acceptButtonEventHandler, { signal: buttonEventAbortController.signal });
    acceptButton.addEventListener("touchend", acceptButtonEventHandler, { signal: buttonEventAbortController.signal });
    const cancelButton = this.pickerContainer.createEl("button");
    cancelButton.className = "datepicker-widget-button";
    (0, import_obsidian.setIcon)(cancelButton, "x");
    function cancelButtonEventHandler(event) {
      event.preventDefault();
      _Datepicker.escPressed = true;
      _Datepicker.closeAll();
      buttonEventAbortController.abort();
    }
    cancelButton.addEventListener("click", cancelButtonEventHandler.bind(this), { signal: buttonEventAbortController.signal });
    cancelButton.addEventListener("touchend", cancelButtonEventHandler.bind(this), { signal: buttonEventAbortController.signal });
    const controller = new AbortController();
    const keypressHandler = (event) => {
      var _a2;
      if (event.key === "ArrowDown") {
        if (DatepickerPlugin.settings.focusOnArrowDown) {
          event.preventDefault();
          (_a2 = activeDocument.getElementById("datepicker-input")) == null ? void 0 : _a2.focus();
          controller.abort();
        }
      }
      if (event.key === "Escape") {
        event.preventDefault();
        _Datepicker.escPressed = true;
        _Datepicker.closeAll();
        controller.abort();
      }
    };
    (_b = this.pickerContainer.parentElement) == null ? void 0 : _b.addEventListener("keydown", keypressHandler, { signal: controller.signal, capture: true });
    this.pickerInput.addEventListener("keydown", (event) => {
      if (event.key === "Enter") {
        if (this.pickerInput.value === "") {
          new import_obsidian.Notice("Please enter a valid date/time");
        } else {
          this.enterPressed = true;
          this.submit();
          _Datepicker.closeAll();
        }
      }
      if (event.key === "Escape") {
        _Datepicker.escPressed = true;
        this.closeAll();
      }
    }, { capture: true });
    const blurEventHandler = () => {
      setTimeout(() => {
        if (!_Datepicker.escPressed && !this.enterPressed && DatepickerPlugin.settings.autoApplyEdits)
          this.submit();
      }, 250);
    };
    this.pickerInput.addEventListener("blur", blurEventHandler);
    this.updatePosition(pos);
    if (import_obsidian.Platform.isMobile) {
      this.pickerInput.addEventListener("touchstart", (e) => {
        e.preventDefault();
      });
      this.pickerInput.addEventListener("touchend", (e) => {
        e.preventDefault();
        this.pickerInput.showPicker();
      });
    }
    if (DatepickerPlugin.settings.autofocus)
      this.pickerInput.focus();
    if (DatepickerPlugin.settings.immediatelyShowCalendar) {
      if (_Datepicker.calendarImmediatelyShownOnce)
        return;
      this.pickerInput.focus();
      setTimeout(() => {
        if (_Datepicker.isOpened)
          this.pickerInput.showPicker();
        _Datepicker.calendarImmediatelyShownOnce = true;
      }, 300);
    }
  }
};
var Datepicker = _Datepicker;
Datepicker.isOpened = false;
Datepicker.escPressed = false;
Datepicker.openedByButton = false;
// prevents reopening the datepicker on the just inserted date
Datepicker.performedInsertCommand = false;
// Used for preventing the calendar from continuously reopening on every
// interaction with the datefield when set to immediatelyShowCalendar
Datepicker.calendarImmediatelyShownOnce = false;
var DatepickerSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl: settingsContainerElement } = this;
    settingsContainerElement.empty();
    new import_obsidian.Setting(settingsContainerElement).setName("Show a picker button for dates").setDesc("Shows a button with a calendar icon associated with date values, select it to open the picker (Reloading Obsidian may be required)").addToggle((toggle) => toggle.setValue(DatepickerPlugin.settings.showDateButtons).onChange(async (value) => {
      DatepickerPlugin.settings.showDateButtons = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(settingsContainerElement).setName("Show a picker button for times").setDesc("Shows a button with a clock icon associated with time values, select it to open the picker (Reloading Obsidian may be required)").addToggle((toggle) => toggle.setValue(DatepickerPlugin.settings.showTimeButtons).onChange(async (value) => {
      DatepickerPlugin.settings.showTimeButtons = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(settingsContainerElement).setName("Show automatically").setDesc("Datepicker will show automatically whenever a date/time value is selected").addToggle((toggle) => toggle.setValue(DatepickerPlugin.settings.showAutomatically).onChange(async (value) => {
      DatepickerPlugin.settings.showAutomatically = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(settingsContainerElement).setName("Auto apply edits").setDesc("Will automatically apply edits made to the date when the datepicker closes or loses focus").addToggle((toggle) => toggle.setValue(DatepickerPlugin.settings.autoApplyEdits).onChange(async (value) => {
      DatepickerPlugin.settings.autoApplyEdits = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(settingsContainerElement).setName("Immediately show calendar").setDesc("Immediately show the calendar when the datepicker opens").addToggle((toggle) => toggle.setValue(DatepickerPlugin.settings.immediatelyShowCalendar).onChange(async (value) => {
      DatepickerPlugin.settings.immediatelyShowCalendar = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(settingsContainerElement).setName("Autofocus").setDesc("Automatically focus the datepicker whenever the datepicker opens").addToggle((toggle) => toggle.setValue(DatepickerPlugin.settings.autofocus).onChange(async (value) => {
      DatepickerPlugin.settings.autofocus = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(settingsContainerElement).setName("Focus on pressing down arrow key").setDesc("Focuses the datepicker when the down arrow keyboard key is pressed").addToggle((toggle) => toggle.setValue(DatepickerPlugin.settings.focusOnArrowDown).onChange(async (value) => {
      DatepickerPlugin.settings.focusOnArrowDown = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(settingsContainerElement).setName("Insert new time in 24 hour format").setDesc('Insert time in 24 hour format when performing "Insert new time" and "Insert new date and time" commands').addToggle((toggle) => toggle.setValue(DatepickerPlugin.settings.insertIn24HourFormat).onChange(async (value) => {
      DatepickerPlugin.settings.insertIn24HourFormat = value;
      await this.plugin.saveSettings();
    }));
    new import_obsidian.Setting(settingsContainerElement).setName("Select date/time text").setDesc("Automatically select the entire date/time text when a date/time is selected").addToggle((toggle) => toggle.setValue(DatepickerPlugin.settings.selectDateText).onChange(async (value) => {
      DatepickerPlugin.settings.selectDateText = value;
      await this.plugin.saveSettings();
    }));
  }
};
